// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("peer.proto", fileDescriptor_055ae5a865fc1c9e) }

var fileDescriptor_055ae5a865fc1c9e = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0xcb, 0xc2, 0x40,
	0x0c, 0xc6, 0xb7, 0x97, 0x97, 0x5b, 0x84, 0x0a, 0x0e, 0xa5, 0x93, 0xb3, 0xbd, 0x03, 0xfd, 0x06,
	0x82, 0xb8, 0x38, 0x94, 0x76, 0x73, 0x91, 0xfe, 0x89, 0xd7, 0x83, 0xda, 0x84, 0xa4, 0x0e, 0x7e,
	0x7b, 0xa9, 0xe9, 0x81, 0x4e, 0x81, 0xdf, 0xf3, 0x4b, 0xc8, 0x63, 0x0c, 0x01, 0xb0, 0x25, 0xc6,
	0x09, 0x93, 0xbf, 0xcf, 0x90, 0x74, 0x3d, 0x33, 0x47, 0x8c, 0x84, 0x52, 0x0f, 0x1a, 0xa6, 0xd9,
	0x0f, 0xbc, 0x31, 0x08, 0xe1, 0x28, 0xa0, 0xe9, 0xbe, 0x32, 0xff, 0xa7, 0xb1, 0x43, 0x16, 0xe0,
	0xe4, 0x6c, 0x56, 0x05, 0x63, 0x0b, 0x22, 0xc5, 0x62, 0x27, 0x1b, 0xd5, 0xc4, 0x56, 0xc1, 0x8f,
	0xd0, 0x45, 0x9e, 0x66, 0x91, 0x47, 0x52, 0x2e, 0x67, 0x2f, 0x41, 0xa6, 0x63, 0x69, 0xb6, 0xc8,
	0xde, 0xf6, 0x2f, 0x02, 0x1e, 0xa0, 0xf3, 0xc0, 0xf6, 0x5e, 0x37, 0x1c, 0xda, 0xb8, 0x35, 0xbf,
	0x74, 0xdd, 0xf9, 0x30, 0xf5, 0xcf, 0xc6, 0xb6, 0xf8, 0x70, 0x5f, 0xaa, 0x53, 0x35, 0x57, 0x35,
	0xf7, 0xe8, 0x66, 0xbb, 0xd1, 0x8e, 0x87, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xd8, 0x0c,
	0x4e, 0xf8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndorserClient is the client API for Endorser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndorserClient interface {
	ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponseList, error)
}

type endorserClient struct {
	cc *grpc.ClientConn
}

func NewEndorserClient(cc *grpc.ClientConn) EndorserClient {
	return &endorserClient{cc}
}

func (c *endorserClient) ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponseList, error) {
	out := new(ProposalResponseList)
	err := c.cc.Invoke(ctx, "/protos.Endorser/ProcessProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndorserServer is the server API for Endorser service.
type EndorserServer interface {
	ProcessProposal(context.Context, *SignedProposal) (*ProposalResponseList, error)
}

// UnimplementedEndorserServer can be embedded to have forward compatible implementations.
type UnimplementedEndorserServer struct {
}

func (*UnimplementedEndorserServer) ProcessProposal(ctx context.Context, req *SignedProposal) (*ProposalResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessProposal not implemented")
}

func RegisterEndorserServer(s *grpc.Server, srv EndorserServer) {
	s.RegisterService(&_Endorser_serviceDesc, srv)
}

func _Endorser_ProcessProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndorserServer).ProcessProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Endorser/ProcessProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndorserServer).ProcessProposal(ctx, req.(*SignedProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Endorser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Endorser",
	HandlerType: (*EndorserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessProposal",
			Handler:    _Endorser_ProcessProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer.proto",
}
